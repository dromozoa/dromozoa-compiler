local execute = (function ()
local tonumber = tonumber
local concat = table.concat

local string_byte = string.byte
local string_char = string.char
local string_find = string.find
local string_gsub = string.gsub
local string_sub = string.sub

local encode_utf8
local decode_surrogate_pair

local utf8 = utf8
if utf8 then
  encode_utf8 = utf8.char
else
  local result, module = pcall(require, "dromozoa.utf8.encode")
  if result then
    encode_utf8 = module
  end
end
if not encode_utf8 then
  encode_utf8 = function (a)
    if a <= 0x7F then
      return string_char(a)
    elseif a <= 0x07FF then
      local b = a % 0x40
      local a = (a - b) / 0x40
      return string_char(a + 0xC0, b + 0x80)
    elseif a <= 0xFFFF then
      local c = a % 0x40
      local a = (a - c) / 0x40
      local b = a % 0x40
      local a = (a - b) / 0x40
      return string_char(a + 0xE0, b + 0x80, c + 0x80)
    else
      local d = a % 0x40
      local a = (a - d) / 0x40
      local c = a % 0x40
      local a = (a - c) / 0x40
      local b = a % 0x40
      local a = (a - b) / 0x40
      return string_char(a + 0xF0, b + 0x80, c + 0x80, d + 0x80)
    end
  end
end

local result, module = pcall(require, "dromozoa.utf16.decode_surrogate_pair")
if result then
  decode_surrogate_pair = module
else
  decode_surrogate_pair = function (a, b)
    return (a - 0xD800) * 0x0400 + (b - 0xDC00) + 0x010000
  end
end

local function range(ri, rj, i, j)
  if i > 0 then
    i = i + ri - 1
  else
    i = i + rj + 1
  end
  if j > 0 then
    j = j + ri - 1
  else
    j = j + rj + 1
  end
  return i, j
end

local eol_table = {
  ["\r"] = "\n";
  ["\r\n"] = "\n";
  ["\n\r"] = "\n";
  ["\r\r"] = "\n\n";
}

return function (self, s)
  local init = 1
  local n = #s
  local terminal_nodes = {}

  local stack = { 1 } -- start lexer
  local position_start = init
  local position_mark
  local buffer = {}

  while init <= n do
    local lexer = self[stack[#stack]]
    local automaton = lexer.automaton
    local position
    local accept

    if automaton then -- regexp_lexer
      local transitions = automaton.transitions
      local state = automaton.start_state

      for i = init + 3, n, 4 do
        local a, b, c, d = string_byte(s, i - 3, i)
        local state1 = transitions[a][state]
        if not state1 then
          position = i - 3
          break
        else
          local state2 = transitions[b][state1]
          if not state2 then
            state = state1
            position = i - 2
            break
          else
            local state3 = transitions[c][state2]
            if not state3 then
              state = state2
              position = i - 1
              break
            else
              local state4 = transitions[d][state3]
              if not state4 then
                state = state3
                position = i
                break
              else
                state = state4
              end
            end
          end
        end
      end

      if not position then
        position = n + 1
        local m = position - (position - init) % 4
        if m < position then
          local a, b, c = string_byte(s, m, n)
          if c then
            local state1 = transitions[a][state]
            if not state1 then
              position = m
            else
              local state2 = transitions[b][state1]
              if not state2 then
                state = state1
                position = m + 1
              else
                local state3 = transitions[c][state2]
                if not state3 then
                  state = state2
                  position = n
                else
                  state = state3
                end
              end
            end
          elseif b then
            local state1 = transitions[a][state]
            if not state1 then
              position = m
            else
              local state2 = transitions[b][state1]
              if not state2 then
                state = state1
                position = m + 1
              else
                state = state2
              end
            end
          else
            local state1 = transitions[a][state]
            if not state1 then
              position = m
            else
              state = state1
            end
          end
        end
      end

      accept = automaton.accept_states[state]
      if not accept then
        return nil, "lexer error", init
      end
    else -- search lexer
      local i, j = string_find(s, self.hold, init, true)
      if not i then
        return nil, "lexer error", init
      end
      if init == i then
        position = j + 1
        accept = 1
      else
        position = i
        accept = 2
      end
    end

    local skip
    local rs = s
    local ri = init
    local rj = position - 1
    local rv

    local actions = lexer.accept_to_actions[accept]
    for i = 1, #actions do
      local action = actions[i]
      local code = action[1]
      if code == 1 then -- skip
        skip = true
      elseif code == 2 then -- push
        buffer[#buffer + 1] = string_sub(rs, ri, rj)
        skip = true
      elseif code == 3 then -- concat
        rs = concat(buffer)
        ri = 1
        rj = #rs
        for j = 1, #buffer do
          buffer[j] = nil
        end
      elseif code == 4 then -- call
        stack[#stack + 1] = action[2]
      elseif code == 5 then -- return
        stack[#stack] = nil
      elseif code == 6 then -- substitute
        rs = action[2]
        ri = 1
        rj = #rs
      elseif code == 7 then -- hold
        self.hold = string_sub(rs, ri, rj)
      elseif code == 8 then -- mark
        position_mark = init
      elseif code == 9 then -- substring
        ri, rj = range(ri, rj, action[2], action[3])
      elseif code == 10 then -- convert to integer
        rv = tonumber(string_sub(rs, ri, rj), action[2])
      elseif code == 11 then -- convert to char
        rs = string_char(rv)
        ri = 1
        rj = #rs
      elseif code == 12 then -- join
        rs = action[2] .. string_sub(rs, ri, rj) .. action[3]
        ri = 1
        rj = #rs
      elseif code == 13 then -- encode utf8
        rs = encode_utf8(tonumber(string_sub(rs, range(ri, rj, action[2], action[3])), 16))
        ri = 1
        rj = #rs
      elseif code == 14 then -- encode utf8 (surrogate pair)
        local code1 = tonumber(string_sub(rs, range(ri, rj, action[2], action[3])), 16)
        local code2 = tonumber(string_sub(rs, range(ri, rj, action[4], action[5])), 16)
        rs = encode_utf8(decode_surrogate_pair(code1, code2))
        ri = 1
        rj = #rs
      elseif code == 15 then -- add integer
        rv = rv + action[2]
      elseif code == 16 then -- normalize end-of-line
        rs = string_gsub(string_gsub(string_sub(rs, ri, rj), "[\n\r][\n\r]?", eol_table), "^\n", "")
        ri = 1
        rj = #rs
      end
    end

    if not skip then
      if not position_mark then
        position_mark = init
      end
      terminal_nodes[#terminal_nodes + 1] = {
        [0] = lexer.accept_to_symbol[accept];
        p = position_start;
        i = position_mark;
        j = position - 1;
        rs = rs;
        ri = ri;
        rj = rj;
      }
      position_start = position
      position_mark = nil
    end
    init = position
  end

  if #stack == 1 then
    if not position_mark then
      position_mark = init
    end
    terminal_nodes[#terminal_nodes + 1] = {
      [0] = 1; -- marker end
      p = position_start;
      i = position_mark;
      j = n;
      rs = s;
      ri = init;
      rj = n;
    }
    return terminal_nodes
  else
    return nil, "lexer error", init
  end
end
end)()
local metatable = { __call = execute }
local _ = {}
_[1] = {1}
_[2] = {_[1]}
_[3] = {}
_[4] = {4,2}
_[5] = {8}
_[6] = {_[1],_[4],_[5]}
_[7] = {4,3}
_[8] = {_[1],_[7],_[5]}
_[9] = {9,2,-2}
_[10] = {12,"]","]"}
_[11] = {7}
_[12] = {4,4}
_[13] = {_[9],_[10],_[11],_[1],_[12],_[5]}
_[14] = {9,4,-2}
_[15] = {4,5}
_[16] = {_[14],_[10],_[11],_[1],_[15]}
_[17] = {_[2],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[3],_[6],_[8],_[13],_[3],_[3],_[3],_[3],_[2],_[16]}
_[18] = {nil,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,nil,nil,nil,58,58,59,59}
_[19] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,59,60,61,61,62,63,63,64,64,65,65,65,65,66}
_[20] = {[124]=125,[125]=125,[127]=125}
_[21] = {[1]=1,[124]=125,[125]=125,[127]=125,[129]=1}
_[22] = {[1]=1,[124]=126,[125]=126,[127]=126,[129]=1}
_[23] = {[124]=125,[125]=125,[127]=125,[129]=114}
_[24] = {[124]=125,[125]=125,[127]=125,[129]=30}
_[25] = {[124]=125,[125]=125,[127]=125,[129]=28}
_[26] = {[124]=125,[125]=125,[127]=125,[129]=31}
_[27] = {[124]=125,[125]=125,[127]=125,[129]=115}
_[28] = {[124]=125,[125]=125,[127]=125,[129]=44}
_[29] = {[124]=125,[125]=125,[127]=125,[129]=45}
_[30] = {[124]=125,[125]=125,[127]=125,[129]=26}
_[31] = {[124]=125,[125]=125,[127]=125,[129]=24,[130]=131,[134]=135}
_[32] = {[124]=125,[125]=125,[127]=125,[129]=53}
_[33] = {[25]=124,[124]=125,[125]=125,[127]=125,[129]=25,[130]=131,[134]=135}
_[34] = {[54]=55,[55]=56,[117]=120,[118]=120,[119]=122,[124]=125,[125]=125,[127]=125,[129]=54,[132]=133}
_[35] = {[27]=36,[124]=125,[125]=125,[127]=125,[129]=27}
_[36] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,120,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,118,118,119,120,121,122,123,125,125,nil,125,nil,117,121,121,119,122,123,123}
_[37] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,120,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,118,118,119,120,121,122,123,125,125,nil,125,nil,118,121,121,119,122,123,123}
_[38] = {[52]=50,[124]=125,[125]=125,[127]=125,[129]=52}
_[39] = {[124]=125,[125]=125,[127]=125,[129]=51}
_[40] = {[41]=34,[124]=125,[125]=125,[127]=125,[129]=41}
_[41] = {[32]=38,[41]=39,[42]=40,[43]=37,[48]=136,[124]=125,[125]=125,[127]=127,[129]=43,[136]=136}
_[42] = {[42]=35,[124]=125,[125]=125,[127]=125,[129]=42}
_[43] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,119,nil,nil,122,nil,125,125,nil,125,nil,57,nil,nil,119,122}
_[44] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,130,130,119,130,nil,122,nil,125,125,nil,125,nil,57,nil,nil,119,122}
_[45] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,57}
_[46] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,134,nil,nil,134,nil,125,125,nil,125,nil,57}
_[47] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,132,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,57}
_[48] = {[48]=116,[124]=127,[125]=125,[127]=128,[129]=48,[136]=116}
_[49] = {[124]=125,[125]=125,[127]=125,[129]=49}
_[50] = {[124]=125,[125]=125,[127]=125,[129]=29}
_[51] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,94,57,57,68,57,57,57,104,57,108,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,119,nil,nil,122,nil,125,125,nil,125,nil,77,nil,nil,119,122}
_[52] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,119,nil,nil,122,nil,125,125,nil,125,nil,61,nil,nil,119,122}
_[53] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,62,57,57,57,57,57,57,57,57,57,57,57,85,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,119,nil,nil,122,nil,125,125,nil,125,nil,57,nil,nil,119,122}
_[54] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,2,57,57,57,57,7,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,119,nil,nil,122,nil,125,125,nil,125,nil,95,nil,nil,119,122}
_[55] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,64,57,57,57,57,57,57,78,57,57,57,57,87,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,110,57,57,57,57,57,57,5,57,57,8,57,57,57,57,57,57,57,57,57,57,57,21,57,23,nil,nil,nil,130,130,119,130,nil,122,nil,125,125,nil,125,nil,79,nil,nil,119,122}
_[56] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,6,57,57,57,57,57,12,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,119,nil,nil,122,nil,125,125,nil,125,nil,81,nil,nil,119,122}
_[57] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,70}
_[58] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,76,57,57,57,57,57,57,57,89,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,57}
_[59] = {nil,57,57,57,97,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,83,57,57,57,57,57,57,92,57,57,57,57,57,57,57,57,57,105,57,57,57,57,112,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,103}
_[60] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,3,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,57}
_[61] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,82,57,57,57,57,57,57,57,57,57,57,80,57,57,57,57,57,57,57,57,57,57,57,57,113,57,57,57,57,57,57,57,57,57,57,57,14,15,57,57,57,57,57,57,22,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,63}
_[62] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,59,57,57,57,57,57,57,75,57,57,57,57,57,57,57,57,57,57,57,93,57,98,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,10,57,13,57,57,57,57,57,19,20,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,86}
_[63] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,71,57,57,57,57,57,57,84,57,57,57,57,57,57,57,57,57,57,100,57,101,57,57,106,57,57,57,57,57,57,57,57,4,57,57,57,57,57,57,11,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,107}
_[64] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,72,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,134,nil,nil,134,nil,125,125,nil,125,nil,57}
_[65] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,67,57,57,57,57,57,57,57,57,57,57,57,57,90,57,57,57,57,57,57,57,57,57,57,57,57,57,109,57,57,57,57,57,57,57,57,57,57,57,9,57,57,57,57,57,57,17,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,60}
_[66] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,96,57,99,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,57}
_[67] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,69,57,73,57,57,57,57,57,57,57,57,57,57,91,57,57,57,57,57,57,57,57,102,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,16,57,18,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,74}
_[68] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,88,57,57,57,57,57,57,57,58,57,57,57,57,57,57,57,57,111,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,65}
_[69] = {nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,125,125,nil,125,nil,66}
_[70] = {[124]=125,[125]=125,[127]=125,[129]=46}
_[71] = {[124]=125,[125]=125,[127]=125,[129]=33}
_[72] = {[124]=125,[125]=125,[127]=125,[129]=47}
_[73] = {[124]=125,[125]=125,[127]=125,[129]=32}
_[74] = {_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[21],_[22],_[21],_[21],_[22],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[21],_[20],_[23],_[24],_[20],_[25],_[26],_[27],_[28],_[29],_[30],_[31],_[32],_[33],_[34],_[35],_[36],_[37],_[37],_[37],_[37],_[37],_[37],_[37],_[37],_[37],_[38],_[39],_[40],_[41],_[42],_[20],_[20],_[43],_[43],_[43],_[43],_[44],_[43],_[45],_[45],_[45],_[45],_[45],_[45],_[45],_[45],_[45],_[46],_[45],_[45],_[45],_[45],_[45],_[45],_[45],_[47],_[45],_[45],_[48],_[20],_[49],_[50],_[45],_[20],_[51],_[52],_[53],_[54],_[55],_[56],_[57],_[58],_[59],_[45],_[60],_[61],_[45],_[62],_[63],_[64],_[45],_[65],_[66],_[67],_[68],_[45],_[69],_[47],_[45],_[45],_[70],_[71],_[72],_[73],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],_[20],[0]=_[20]}
_[75] = {accept_states=_[19],max_state=136,start_state=129,transitions=_[74]}
_[76] = {accept_to_actions=_[17],accept_to_symbol=_[18],automaton=_[75]}
_[77] = {6,"\a"}
_[78] = {2}
_[79] = {_[77],_[78]}
_[80] = {6,"\b"}
_[81] = {_[80],_[78]}
_[82] = {6,"\f"}
_[83] = {_[82],_[78]}
_[84] = {6,"\n"}
_[85] = {_[84],_[78]}
_[86] = {6,"\r"}
_[87] = {_[86],_[78]}
_[88] = {6,"\t"}
_[89] = {_[88],_[78]}
_[90] = {6,"\v"}
_[91] = {_[90],_[78]}
_[92] = {6,"\\"}
_[93] = {_[92],_[78]}
_[94] = {6,"\""}
_[95] = {_[94],_[78]}
_[96] = {6,"'"}
_[97] = {_[96],_[78]}
_[98] = {9,3,-1}
_[99] = {10,16}
_[100] = {11}
_[101] = {_[98],_[99],_[100],_[78]}
_[102] = {9,2,-1}
_[103] = {10,10}
_[104] = {_[102],_[103],_[100],_[78]}
_[105] = {13,4,-2}
_[106] = {_[105],_[78]}
_[107] = {_[78]}
_[108] = {3}
_[109] = {5}
_[110] = {_[108],_[109]}
_[111] = {_[79],_[81],_[83],_[85],_[87],_[89],_[91],_[93],_[95],_[97],_[2],_[85],_[101],_[104],_[106],_[107],_[110]}
_[112] = {[17]=60}
_[113] = {1,2,3,4,5,6,7,8,9,10,11,12,12,12,13,14,14,14,15,16,17}
_[114] = {[20]=20,[22]=20}
_[115] = {[11]=11,[20]=20,[22]=20}
_[116] = {[11]=11,[14]=13,[20]=20,[22]=20,[23]=12}
_[117] = {[11]=11,[12]=13,[20]=20,[22]=20,[23]=14}
_[118] = {[22]=21,[23]=9}
_[119] = {[20]=20,[22]=20,[23]=10}
_[120] = {[16]=17,[17]=18,[20]=20,[22]=20,[23]=16,[25]=27,[26]=28,[27]=27,[28]=15}
_[121] = {[20]=20,[22]=20,[25]=27,[26]=28,[27]=27,[28]=15}
_[122] = {[22]=23,[23]=8}
_[123] = {[20]=20,[22]=20,[23]=1,[25]=27,[26]=28,[27]=27,[28]=15}
_[124] = {[20]=20,[22]=20,[23]=2,[25]=27,[26]=28,[27]=27,[28]=15}
_[125] = {[20]=20,[22]=20,[23]=3,[25]=27,[26]=28,[27]=27,[28]=15}
_[126] = {[20]=20,[22]=20,[23]=4}
_[127] = {[20]=20,[22]=20,[23]=5}
_[128] = {[20]=20,[22]=20,[23]=6}
_[129] = {[20]=20,[22]=20,[23]=24}
_[130] = {[20]=20,[22]=20,[23]=7}
_[131] = {[20]=20,[22]=20,[23]=26}
_[132] = {[20]=20,[22]=20,[23]=11}
_[133] = {[20]=20,[22]=20,[24]=25}
_[134] = {[20]=20,[22]=20,[27]=19}
_[135] = {_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[115],_[116],_[115],_[115],_[117],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[115],_[114],_[118],_[114],_[114],_[114],_[114],_[119],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[121],_[121],_[121],_[121],_[121],_[121],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[122],_[114],_[114],_[114],_[114],_[123],_[124],_[121],_[121],_[121],_[125],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[126],_[114],_[114],_[114],_[127],_[114],_[128],_[129],_[130],_[114],_[131],_[114],_[132],_[133],_[114],_[134],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],[0]=_[114]}
_[136] = {accept_states=_[113],max_state=28,start_state=22,transitions=_[135]}
_[137] = {accept_to_actions=_[111],accept_to_symbol=_[112],automaton=_[136]}
_[138] = {[20]=20,[22]=20,[23]=9}
_[139] = {[22]=21,[23]=10}
_[140] = {_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[115],_[116],_[115],_[115],_[117],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[115],_[114],_[138],_[114],_[114],_[114],_[114],_[139],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[120],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[121],_[121],_[121],_[121],_[121],_[121],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[122],_[114],_[114],_[114],_[114],_[123],_[124],_[121],_[121],_[121],_[125],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[126],_[114],_[114],_[114],_[127],_[114],_[128],_[129],_[130],_[114],_[131],_[114],_[132],_[133],_[114],_[134],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],_[114],[0]=_[114]}
_[141] = {accept_states=_[113],max_state=28,start_state=22,transitions=_[140]}
_[142] = {accept_to_actions=_[111],accept_to_symbol=_[112],automaton=_[141]}
_[143] = {16}
_[144] = {_[108],_[143],_[109]}
_[145] = {_[144],_[107]}
_[146] = {60}
_[147] = {accept_to_actions=_[145],accept_to_symbol=_[146]}
_[148] = {_[1],_[109]}
_[149] = {_[148],_[2]}
_[150] = {accept_to_actions=_[149],accept_to_symbol=_[3]}
_[151] = {_[76],_[137],_[142],_[147],_[150]}
local root = setmetatable(_[151], metatable)
return function() return root end
